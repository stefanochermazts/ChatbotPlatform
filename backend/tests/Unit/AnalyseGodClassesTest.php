<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

/**
 * Test for God Classes Analysis Script
 * 
 * Validates the JSON structure generated by scripts/analyse_god_classes.php
 * 
 * @group refactoring
 * @group god-classes
 */
class AnalyseGodClassesTest extends TestCase
{
    private array $analysisData;

    protected function setUp(): void
    {
        parent::setUp();
        
        $jsonPath = __DIR__ . '/../../storage/temp/god_analysis.json';
        
        $this->assertFileExists($jsonPath, 'Analysis JSON file should exist');
        
        $jsonContent = file_get_contents($jsonPath);
        $this->analysisData = json_decode($jsonContent, true);
        
        $this->assertIsArray($this->analysisData, 'JSON should be valid and decode to array');
    }

    /** @test */
    public function it_contains_all_three_target_classes()
    {
        $expectedClasses = [
            'App\\Jobs\\IngestUploadedDocumentJob',
            'App\\Http\\Controllers\\Api\\ChatCompletionsController',
            'App\\Http\\Controllers\\Admin\\DocumentAdminController',
        ];

        foreach ($expectedClasses as $className) {
            $this->assertArrayHasKey($className, $this->analysisData, "Analysis should contain {$className}");
        }
    }

    /** @test */
    public function each_class_has_required_structure()
    {
        $requiredKeys = [
            'class_name',
            'file_path',
            'lines_of_code',
            'method_count',
            'property_count',
            'methods',
            'properties',
            'dependencies',
            'external_calls',
            'complexity',
            'responsibilities',
        ];

        foreach ($this->analysisData as $className => $classData) {
            foreach ($requiredKeys as $key) {
                $this->assertArrayHasKey(
                    $key,
                    $classData,
                    "{$className} should have '{$key}' in analysis"
                );
            }
        }
    }

    /** @test */
    public function methods_array_has_correct_structure()
    {
        $requiredMethodKeys = [
            'name',
            'visibility',
            'is_static',
            'lines_of_code',
            'parameters',
            'return_type',
        ];

        foreach ($this->analysisData as $className => $classData) {
            $this->assertIsArray($classData['methods'], "{$className} methods should be array");
            $this->assertNotEmpty($classData['methods'], "{$className} should have at least one method");

            $firstMethod = $classData['methods'][0];
            foreach ($requiredMethodKeys as $key) {
                $this->assertArrayHasKey(
                    $key,
                    $firstMethod,
                    "{$className} method should have '{$key}'"
                );
            }

            // Validate types
            $this->assertIsString($firstMethod['name']);
            $this->assertIsInt($firstMethod['lines_of_code']);
            $this->assertIsInt($firstMethod['parameters']);
            $this->assertContains($firstMethod['visibility'], ['public', 'protected', 'private']);
            $this->assertIsBool($firstMethod['is_static']);
        }
    }

    /** @test */
    public function complexity_has_correct_structure()
    {
        foreach ($this->analysisData as $className => $classData) {
            $complexity = $classData['complexity'];

            $this->assertArrayHasKey('total', $complexity);
            $this->assertArrayHasKey('average', $complexity);
            $this->assertArrayHasKey('per_method', $complexity);

            $this->assertIsInt($complexity['total']);
            $this->assertIsNumeric($complexity['average']);
            $this->assertIsArray($complexity['per_method']);
        }
    }

    /** @test */
    public function responsibilities_are_identified()
    {
        foreach ($this->analysisData as $className => $classData) {
            $this->assertIsArray($classData['responsibilities']);
            $this->assertNotEmpty(
                $classData['responsibilities'],
                "{$className} should have at least one responsibility identified"
            );

            foreach ($classData['responsibilities'] as $responsibility) {
                $this->assertIsString($responsibility);
            }
        }
    }

    /** @test */
    public function ingestion_job_has_expected_responsibilities()
    {
        $jobData = $this->analysisData['App\\Jobs\\IngestUploadedDocumentJob'];
        
        $expectedResponsibilities = [
            'File Extraction',
            'Text Processing',
            'Chunking',
            'Embeddings',
            'Vector Indexing',
        ];

        foreach ($expectedResponsibilities as $responsibility) {
            $this->assertContains(
                $responsibility,
                $jobData['responsibilities'],
                "IngestUploadedDocumentJob should have '{$responsibility}' responsibility"
            );
        }
    }

    /** @test */
    public function chat_controller_has_rag_orchestration_responsibility()
    {
        $controllerData = $this->analysisData['App\\Http\\Controllers\\Api\\ChatCompletionsController'];
        
        $this->assertContains(
            'RAG Orchestration',
            $controllerData['responsibilities'],
            "ChatCompletionsController should have 'RAG Orchestration' responsibility"
        );
    }

    /** @test */
    public function document_admin_has_crud_responsibility()
    {
        $controllerData = $this->analysisData['App\\Http\\Controllers\\Admin\\DocumentAdminController'];
        
        $this->assertContains(
            'CRUD Operations',
            $controllerData['responsibilities'],
            "DocumentAdminController should have 'CRUD Operations' responsibility"
        );
    }

    /** @test */
    public function external_calls_are_categorized()
    {
        foreach ($this->analysisData as $className => $classData) {
            $this->assertIsArray($classData['external_calls']);

            // Each external service should have an array of methods
            foreach ($classData['external_calls'] as $service => $methods) {
                $this->assertIsString($service);
                $this->assertIsArray($methods);

                foreach ($methods as $method) {
                    $this->assertIsString($method);
                }
            }
        }
    }

    /** @test */
    public function all_classes_exceed_300_line_limit()
    {
        foreach ($this->analysisData as $className => $classData) {
            $this->assertGreaterThan(
                300,
                $classData['lines_of_code'],
                "{$className} should exceed 300 LOC (it's a God Class)"
            );
        }
    }

    /** @test */
    public function ingestion_job_has_highest_method_count()
    {
        $jobData = $this->analysisData['App\\Jobs\\IngestUploadedDocumentJob'];
        
        $this->assertGreaterThan(
            30,
            $jobData['method_count'],
            "IngestUploadedDocumentJob should have many methods (sign of high complexity)"
        );
    }
}

